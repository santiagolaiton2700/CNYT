import unittest,Ejercicios
import math as m

class TestCases(unittest.TestCase):
     def test_canicas(self):
        respuesta = [[(0, 0)], [(0, 0)], [(0, 14)], [(0, 6)], [(0, 2)], [(0, 11)]]
        a = [[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (1, 0)], [(0, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0)], [(0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)], [(1, 0), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)]]
        b = 0
        c = [[(6, 0), (2, 0), (1, 0), (5, 0), (3, 0), (10, 0)]]
        self.assertEqual(Ejercicios.canicas(a, b, c), respuesta)
     def test_Balas(self):
        respuesta = [[(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)], [(0.0, 0.0)]]
        a = [[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
             [(1 / 2, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
             [(1 / 2, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
             [(0, 0), (1 / 3, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
             [(0, 0), (1 / 3, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)],
             [(0, 0), (1 / 3, 0), (1 / 3, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0)],
             [(0, 0), (0, 0), (1 / 3, 0), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)],
             [(0, 0), (0, 0), (1 / 3, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 0)]]
        b = 1
        c = [[(1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]]
        self.assertEqual(Ejercicios.balas(a, b,c),respuesta)
     def test_flash(self):
        respuesta=[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.16666666666666666, 0.3333333333333333, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.16666666666666666, 0.3333333333333333, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 1.0, 0.0, 0.0], [0.16666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 1.0, 0.0], [0.16666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 1.0]]
        a=[[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
           [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
           [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
           [(1 / 6, 0), (1 / 3, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
           [(1 / 6, 0), (1 / 3, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)],
           [(0, 0), (1 / 3, 0), (1 / 3, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0)],
           [(1 / 6, 0), (0, 0), (1 / 3, 0), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)],
           [(1 / 6, 0), (0, 0), (1 / 3, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 0)]]
        b=1
        self.assertEqual(Ejercicios.flash(a,b),respuesta)
     "----------------ejercicio2-----------------------------------"
     def test_particle(self):
          a=[(-3, -1), (0, -2), (0, 1), (2, 0)]
          respuesta=0.052629
          self.assertEqual(Ejercicios.particle(a),respuesta)
     def test_normalice(self):
          a=[(3, -1), (0, 2), (0, 1), (2, 2)]
          respuesta=[[(0.0, 0.41701), (0.0, 0.41701), (0.0, 0.41701), (0.0, 0.41701)]]
          self.assertEqual(Ejercicios.normalize(a),respuesta)
     def test_spin(self):
          a=[(3, -4), (7, 2)]
          respuesta=(0.32, 0.68)
          self.assertEqual(Ejercicios.spin(a),respuesta)
     "----------------------Ejercicio3--------------------------"
     def test_variance(self):
          a=[[(1, 0), (0, -1)], [(0, 1), (2, 0)]]
          b = [[(0.707, 0), (0, 0.707)]]
          self.assertEqual(Ejercicios.variance(a,b),-0.1)  
##     def testeigenstates(self):
##        a = [[(1, 0), (0, -1)], [(0, 1), (2, 0)]]
##        b = [[(0.707, 0), (0, 0.707)]]
##        self.assertEqual(Ejercicios.eigenstates(a,b),-0.1)  
     def test_proba(self):
        h = 2
        ket = [(1, 0), (0, 0), (1, 0), (0, 0), (1, 0), (1, 0)]
        r = 0.5
        self.assertEqual(Ejercicios.proba(h,ket),r)  
if __name__ == "__main__":
    unittest.main()
